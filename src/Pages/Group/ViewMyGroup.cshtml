@page
@model SquidMeet.WebSite.Pages.Group.UpdateGroupModel
@using SquidMeet.WebSite.Components
@{
    ViewData["Title"] = "ViewMygroup page";
}
@{
    TempData.Keep("user");
}

<h3>My Groups</h3>

<div class="card-columns" style="margin-top: 100px">
    @{
        var dataset = Model.Groups;


        //List<MeetupModel> meetups = new List<MeetupModel>();
        //meetups.Add(meetup);

        foreach (var meetup in dataset)
        {
            var attendees = meetup.Attendees;
            int count;
            var host = (string)TempData["user"] == meetup.Host;
            @if (attendees != null)
            {
                count = attendees.Count();
            }
            else
            {
                count = 0;
            }

            <div class="card">
                <a href="/Group/MyGroupDetail/@meetup.meetup_id" onclick="">
                    <div class="card-img" style="background-image: url('@meetup.Img');"></div>
                </a>
                <div class="card-body">
                    <h5 class="card-title">Title: @meetup.Title</h5>
                    <a style="font-size:12px; margin-right: 10px">Host</a>
                    <a style="font-size:12px; margin-right: 10px">@meetup.Host</a>
                    @{
                        if (attendees != null)
                        {
                            <br />
                            <a style="font-size:12px; margin-right: 10px">Attentee: </a>
                            foreach (var attendee in attendees)
                            {
                                if (attendee != null)
                                {
                                <a style="font-size:12px; margin-right: 10px">@attendee.user</a>
                                }
                            }
                        }
                        else
                        {
                            <br />
                            <a class="card-text"> 0 Attendee</a>
                        }
                    }

                </div>

                <div class="card-footer">
                    <small class="text-muted">
                        Date: @meetup.Date
                        @{
                            if ((string)TempData["user"] == meetup.Host)
                            {
                                <a href="/Group/Update/@meetup.meetup_id" onclick="">Update</a>
                            } else if (meetup.Attendees!= null && meetup.Attendees.Where(a => a.user.Contains((string)TempData["user"])).Count() > 0)
                            {
                    <a class="badge badge-pill badge-warning" style="color: black; margin-left: -5px; margin-top: 13px;"> @meetup.Attendees.First(a => a.user == (string)TempData["user"]).status</a> }
                        } 
                        <br />
                        <a class="badge badge-pill badge-warning" style="color: black; margin-left: -5px; margin-top: 13px;"> Invite Code</a>
                        <a class="badge badge-light" style="font-size: 11px"> @meetup.InviteCode</a>
                    </small>


                </div>
            </div>
        }
    }
</div>

